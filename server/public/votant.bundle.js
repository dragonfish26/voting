/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/js/votant.js":
/*!*****************************!*\
  !*** ./public/js/votant.js ***!
  \*****************************/
/***/ (() => {

eval("var socket = io();\nsocket.emit(\"newConnection\");\nsocket.emit(\"votantConnected\");\n\n/*\nsocket.emit(\"testMessage\", \"Hello from votant!\"); \n\nsocket.on(\"message\", (data) => {\n    console.log(\"Message from server:\", data);\n});*/\n\nvar voteChartInstance = null;\nvar voteStatus = document.getElementById(\"vote-status\");\nvar voteOptions = document.getElementById(\"vote-options\");\nvar voteResult = document.getElementById(\"vote-result\");\nvar pourBtn = document.getElementById(\"pour\");\nvar contreBtn = document.getElementById(\"contre\");\nvar nppvBtn = document.getElementById(\"nppv\");\nvar abstentionBtn = document.getElementById(\"abstention\");\nvar resultSection = document.getElementById('results-section');\n\n//voter connects\nsocket.emit(\"votantConnected\");\nsocket.on(\"voteStarted\", function (voteName) {\n  voteStatus.innerText = \"Vote is open: \".concat(voteName);\n  voteOptions.style.display = \"block\";\n  resultSection.style.display = 'none';\n  voteResult.style.display = 'none';\n});\nsocket.on(\"voteClosed\", function (voteData) {\n  voteStatus.innerText = \"Vote closed. Results:\";\n  voteOptions.style.display = \"none\";\n  resultSection.style.display = 'block';\n\n  // Clear the canvas before creating a new chart\n  if (voteChartInstance) {\n    voteChartInstance.destroy();\n    voteChartInstance = null;\n  }\n\n  // Clear the canvas element\n  var ctxVoter = document.getElementById('votantChart').getContext('2d');\n  ctxVoter.clearRect(0, 0, ctxVoter.canvas.width, ctxVoter.canvas.height);\n\n  //total votes\n  var totalVotes = voteData.votes.pour + voteData.votes.contre + voteData.votes.nppv + voteData.votes.abstention;\n\n  // create the new chart\n  voteChartInstance = new Chart(ctxVoter, {\n    type: 'bar',\n    data: {\n      labels: ['Pour', 'Contre', 'NPPV', 'Abstention'],\n      datasets: [{\n        label: \"Result for \".concat(voteData.name),\n        data: [voteData.votes.pour, voteData.votes.contre, voteData.votes.nppv, voteData.votes.abstention],\n        backgroundColor: '#DDA15E',\n        borderColor: '#BC6C25',\n        borderWidth: 1\n      }]\n    },\n    options: {\n      indexAxis: 'y',\n      scales: {\n        x: {\n          beginAtZero: true,\n          suggestedMax: Math.max(10, totalVotes)\n        }\n      }\n    }\n  });\n});\nsocket.on(\"error\", function (data) {\n  alert(data.message);\n});\nfunction castVote(voteOption) {\n  socket.emit(\"castVote\", voteOption);\n  voteResult.style.display = 'block';\n  voteResult.innerText = \"You have voted: \".concat(voteOption);\n}\npourBtn.addEventListener(\"click\", function () {\n  return castVote(\"pour\");\n});\ncontreBtn.addEventListener(\"click\", function () {\n  return castVote(\"contre\");\n});\nnppvBtn.addEventListener(\"click\", function () {\n  return castVote(\"nppv\");\n});\nabstentionBtn.addEventListener(\"click\", function () {\n  return castVote(\"abstention\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/votant.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/js/votant.js"]();
/******/ 	
/******/ })()
;